import { afterEach, beforeEach, describe } from '@jest/globals';
import { Builder } from '../../src/Builder';
import { Manager } from '../../src/Manager';
import type { DatabaseTableInfo } from '../../src/types';
import MockUserWithId, { type User } from '../__mocks__/user-with-id.mock';
import {
	InMemoryDatabase,
	InMemoryDatabaseCreationFail,
	InMemoryDatabaseNotReady,
} from '../__mocks__/memory-db-connector-pk-autogenerated.mock';

describe('Manager #with_database_pk_auto_generated', () => {
	// Arrange for all tests
	const dbConfig: DatabaseTableInfo<User, 'id'> = {
		connector: new InMemoryDatabase<User, 'id'>(),
		table_name: 'users',
		primary_key: 'id',
		PK_auto_generated: true,
	};

	test('should create a manager with DatabaseTableInfo setup', () => {
		// Act
		const manager = new Manager<User, 'id'>(dbConfig);

		// Assert
		expect(manager).toBeDefined();
		expect(manager.clean).toBeDefined();
		expect(manager.create).toBeDefined();
		expect(manager.get).toBeDefined();
		expect(manager.remove).toBeDefined();
		expect(manager.save).toBeDefined();
	});

	describe('create', () => {
		// Arrange
		const manager = new Manager<User, 'id'>(dbConfig);

		afterEach(async () => await manager.clean());

		test('should return an entity builder', () => {
			// Act
			const builder = manager.create(Symbol('user-test'), MockUserWithId);

			// Assert
			expect(builder).toBeInstanceOf(Builder);
		});
	});

	describe('save', () => {
		// Arrange
		const manager = new Manager<User, 'id'>(dbConfig);

		beforeEach(async () => await manager.connect());
		afterEach(async () => await manager.clean());

		test('should return a complete entity', async () => {
			// Arrange
			const symUser = Symbol('user-test');
			manager.create(symUser, MockUserWithId).set('age', 33).set('name', 'John');

			// Act
			const user = await manager.save(symUser);

			// Assert
			expect(user.id).toBeDefined();
			expect(user.status).toStrictEqual('active');
			expect(user.name).toStrictEqual('John');
			expect(user.age).toStrictEqual(33);
		});

		test('should throw Error if trying to override auto-generated primary_key', async () => {
			// Arrange
			const symUser = Symbol('user-test');
			manager.create(symUser, MockUserWithId).set('age', 33).set('name', 'John');

			// Act
			const user = manager.save(symUser, ['id', '8990-4532-7890-5432']);

			// Assert
			await expect(user).rejects.toThrow('Fatal Error: Can not override Primary Key auto_generated');
		});
	});

	describe('get', () => {
		// Arrange
		const manager = new Manager<User, 'id'>(dbConfig);

		beforeEach(async () => await manager.connect());
		afterEach(async () => await manager.clean());

		test('should get the stored entity from DatabaseTableInfo', async () => {
			// Arrange
			const symUser1 = Symbol('user-test-1');
			manager.create(symUser1, MockUserWithId).set('age', 33).set('name', 'John');
			await manager.save(symUser1);

			// Act
			const user = await manager.get(symUser1);

			// Assert
			expect(user).toStrictEqual({
				id: expect.any(String),
				name: 'John',
				age: 33,
				status: 'active',
			});
		});

		test('should throw Error if entity is not initialized in repo', async () => {
			// Arrange
			const symUser1 = Symbol('user-test-1');

			// Assert
			await expect(manager.get(symUser1)).rejects.toThrow(`Missing entity for symbol: ${String(symUser1)}`);
		});
	});

	describe('remove', () => {
		// Arrange
		const manager = new Manager<User, 'id'>(dbConfig);
		const symUser1 = Symbol('user-test-1');

		beforeEach(async () => {
			await manager.connect();
			manager.create(symUser1, MockUserWithId).set('age', 33).set('name', 'John');
			await manager.save(symUser1);
		});

		afterEach(async () => await manager.clean());

		test('should remove the stored entity from DatabaseTableInfo & return true', async () => {
			// Act
			const deleted = await manager.remove(symUser1);

			// Assert
			expect(deleted).toBeTruthy();
		});

		test('should throw Error if user is not in store', async () => {
			// Arrange
			const symUser2 = Symbol('user-test-2');

			// Assert
			await expect(manager.remove(symUser2)).rejects.toThrow(`Missing entity for symbol: ${String(symUser2)}`);
		});
	});

	describe('clean', () => {
		// Arrange for all
		const manager = new Manager<User, 'id'>(dbConfig);

		beforeEach(async () => await manager.connect());
		afterEach(async () => await manager.clean());

		test('should remove every entity from DatabaseTableInfo', async () => {
			// Arrange
			const symUser1 = Symbol('user-test-1');
			manager.create(symUser1, MockUserWithId).set('age', 33).set('name', 'John');
			await manager.save(symUser1);

			// Act
			await manager.clean();

			// Assert
			await expect(manager.get(symUser1)).rejects.toThrow(`Missing entity for symbol: ${String(symUser1)}`);
		});
	});

	describe('When health-check fails', () => {
		// Arrange
		const manager = new Manager<User, 'id'>({
			connector: new InMemoryDatabaseNotReady<User, 'id'>(),
			table_name: 'users',
			primary_key: 'id',
			PK_auto_generated: true,
		});

		beforeEach(async () => await manager.connect());
		afterEach(async () => await manager.clean());

		test('should fallback to localStore', async () => {
			// Arrange
			const symUser1 = Symbol('user-test-1');
			manager.create(symUser1, MockUserWithId).set('age', 33).set('name', 'John');

			// Act
			const user = await manager.save(symUser1);

			// Assert
			expect(user.id).toBeUndefined();
			expect(user).toStrictEqual({
				name: 'John',
				age: 33,
				status: 'active',
			});
		});
	});

	describe('When creation fails', () => {
		// Arrange
		const manager = new Manager<User, 'id'>({
			connector: new InMemoryDatabaseCreationFail<User, 'id'>(),
			table_name: 'users',
			primary_key: 'id',
			PK_auto_generated: true,
		});

		beforeEach(async () => await manager.connect());
		afterEach(async () => await manager.clean());

		test('should throw Error', async () => {
			// Arrange
			const symUser1 = Symbol('user-test-1');
			manager.create(symUser1, MockUserWithId).set('age', 33).set('name', 'John');

			// Assert
			await expect(manager.save(symUser1)).rejects.toThrow('Database Insertion Error: no new element created');
		});
	});
});
